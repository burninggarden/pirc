
var
	extend           = req('/lib/utilities/extend'),
	ServerMessage    = req('/lib/server/message'),
	ReplyNumerics    = req('/lib/constants/reply-numerics'),
	InvalidNickError = req('/lib/errors/invalid-nick'),
	ErrorReasons     = req('/lib/constants/error-reasons'),
	Regexes          = req('/lib/constants/regexes');


class ServerNoSuchNickMessage extends ServerMessage {

	setNick(nick) {
		this.nick = nick;
	}

	getNick(nick) {
		return this.nick;
	}

	hasNick() {
		return this.getNick() !== null;
	}

	setChannelName(channel_name) {
		this.channel_name = channel_name;
	}

	getChannelName(channel_name) {
		return this.channel_name;
	}

	hasChannelName() {
		return this.getChannelName() !== null;
	}

	serializeParameters() {
		var
			targets = this.serializeTargets(),
			body    = this.getBody();

		// NOTICE: We're never going to pull the channel name to include here,
		// because this type of message should never be generated by pirc
		// when a channel target needs to be specified. This message should
		// really only be for missing nicks, not missing channels.
		var nick = this.getNick();

		return `${targets} ${nick} :${body}`;
	}

	applyParsedParameters(middle_parameters, trailing_parameter) {
		var token = middle_parameters.pop();

		// You may be wondering why we're checking for channel tokens inside
		// of a reply numeric that seems like it should be specific to nicks.
		// Well... some IRCD's (looking at you, InspIRCd) return information
		// about missing channel names using this numeric, as well.
		if (Regexes.CHANNEL.test(token)) {
			this.setChannelName(token);
		} else {
			this.setNick(token);
		}

		this.setTargetStrings(middle_parameters);
		this.setBody(trailing_parameter);
	}

	toError() {
		return new InvalidNickError(this.getNick(), ErrorReasons.NOT_FOUND);
	}

}

extend(ServerNoSuchNickMessage.prototype, {
	reply_numeric: ReplyNumerics.ERR_NOSUCHNICK,
	body:          'No such nick/channel',
	nick:          null,
	channel_name:  null
});

module.exports = ServerNoSuchNickMessage;
