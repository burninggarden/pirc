message             =  [ ":" prefix SP ] command [ params ] CR LF

prefix              =  servername / userid

userid              =  ( nickname [ [ "!" user ] "@" host ] )

command             =  1*ALPHA / 3DIGIT

params              =  *14( SP middle ) [ SP ":" trailing ]
params              =/  14( SP middle ) [ SP [ ":" ] trailing ]

nospcrlfcl          =  %x01-09 / %x0B-0C / %x0E-1F / %x21-39 / %x3B-FF
                       ; any octet except NUL, CR, LF, " " and ":"

middle              =  nospcrlfcl *( ":" / nospcrlfcl )

trailing            =  *( ":" / " " / nospcrlfcl )

target              =  nickname / server

message-target      =  <channel-name>
message-target      =/ <nick>
message-target      =/ <nick> "!" <user> "@" <host>
message-target      =/ user [ "%" host ] "@" servername
message-target      =/ user "%" host
message-target      =/ targetmask

channel             =  ( "#" / "+" / ( "!" channelid ) / "&" ) chanstring
                       [ ":" chanstring ]

servername          =  hostname

host                =  hostname / hostaddr

hostname            =  shortname *( "." shortname )

shortname           =  ( ALPHA / DIGIT ) *( ALPHA / DIGIT / "-" )
                       *( ALPHA / DIGIT )
                       ; as specified in RFC 1123 [HNAME]

hostaddr            =  ip4addr / ip6addr

ip4addr             =  1*3DIGIT "." 1*3DIGIT "." 1*3DIGIT "." 1*3DIGIT

ip6addr             =  1*HEXDIG 7( ":" 1*HEXDIG )
ip6addr             =/ "0:0:0:0:0:" ( "0" / "FFFF" ) ":" ip4addr

nickname            =  ( ALPHA / special ) *8( ALPHA / DIGIT / special / "-" )

targetmask          =  ( "$" / "#" ) mask
                       ; see details on allowed masks in section 3.3.1

chanstring          =  %x01-07 / %x08-09 / %x0B-0C / %x0E-1F / %x21-2B
chanstring          =/ %x2D-39 / %x3B-FF
                       ; any octet except NUL, BELL, CR, LF, " ", "," and ":"

channelid           =  5( %x41-5A / DIGIT )   ; 5( A-Z / 0-9 )

user                =  1*( %x01-09 / %x0B-0C / %x0E-1F / %x21-3F / %x41-FF )
                       ; any octet except NUL, CR, LF, " " and "@"

key                 =  1*23( %x01-05 / %x07-08 / %x0C / %x0E-1F / %x21-7F )
                       ; any 7-bit US_ASCII character,
                       ; except NUL, CR, LF, FF, h/v TABs, and " "

special             =  %x5B-60 / %x7B-7D
                       ; "[", "]", "\", "`", "_", "^", "{", "|", "}"


userhost-reply      = <nickname> [ <operator-status> ] "=" <away-status> <hostname>

operator-status     = "*"
operator-flag       = "o"

away-status         = ( "+" / "-" )

away-message        = trailing

realname            = trailing

server-info         = trailing

channel-privacy     = ( "=" / "*" / "@" )
                      ; From RFC-2812:
                      ; "@" is used for secret channels, "*" for private
                      ; channels, and "=" for others (public channels).

nick-channel-status = ( "@" / "+" )
                      ; From RFC-2811:
                      ; Channel operators are identified by the "@" symbol next
                      ; to their nickname whenever it is associated with a
                      ; channel (i.e., replies to the NAMES, WHO and WHOIS
                      ; commands).
                      ;
                      ; And I can't find a reference to this anywhere, but the
                      ; "+" symbol denotes that the user was granted voice
                      ; permissions in a moderated channel.

channel-nick        = [ <nick-channel-status> ] <nick>

nick-channel        = [ <nick-channel-status> ] <channel-name>
                      ; The opposite of the above; this uses the same prefixes
                      ; to denote the user's channel status, but they appear
                      ; in front of the channel name instead of the user's
                      ; nick. This rule is used by RPL_WHOISCHANNELS.

mode-change         = ( " " <mode-action> *<mode-char> *( " " <mode-param> )
mode-action         = ( "-" / "+" )

mode-bitmask        = <integer>

hop-count           = <integer>

seconds-idle        = <integer>

integer             = 1*DIGIT
