#!/usr/bin/env node

/**
 * Similar to the more basic "create-proxy" script, this allows us to MITM
 * traffic intended for a remote IRC server, so that we can inspect the
 * data being transmitted over the wire. However, this script offers additional
 * functionality: it can be configured to talk to two backing servers at the
 * same time, and compare the messages between them. I use this for testing
 * to make sure that my server implementation is sending the same (or at least
 * similar) responses back from client requests as other popular IRCDs.
 */

require('../utilities/req');

var
	// FS            = require('fs'),
	Net           = require('net'),
	Delimiters    = req('/lib/constants/delimiters'),
	TextFormatter = req('/utilities/text-formatter'),
	MessageParser = req('/lib/message-parser');


var
	server = new Net.Server(),
	port   = 6666;


var parser = new MessageParser();

/*
var control_stream = FS.createWriteStream('/home/pachet/pirc/control_output', {
	flags: 'a'
});

var test_stream = FS.createWriteStream('/home/pachet/pirc/test_output', {
	flags: 'a'
});
*/


function cleanWhoisChannelsMessage(message) {
	var
		parts     = message.split(':'),
		last_part = parts.pop();

	last_part = last_part.split(' ').sort().join(' ');
	parts.push(last_part);

	return parts.join(':');
}

server.on('connection', function handleConnection(socket) {
	var
		control_server            = Net.createConnection(6667, 'localhost'),
		test_server               = Net.createConnection(6668, 'localhost'),
		control_messages          = [ ],
		test_messages             = [ ],
		control_message_remainder = null,
		test_message_remainder    = null,
		has_seen_control_motd_end = false,
		has_seen_test_motd_end    = false,
		nick                      = null;

	function checkMessages() {
		var index = 0;

		if (control_messages.length < 1 || test_messages.length < 1) {
			return;
		}

		var max_index = 1;

		while (index < max_index) {
			let control_message = control_messages[index];

			index++;

			let
				subindex     = 0,
				test_message = null,
				control_leader;

			while (subindex < max_index) {
				let
					current_message = test_messages[subindex],
					test_leader     = parser.getLeaderForMessage(current_message);

				control_leader = parser.getLeaderForMessage(control_message);

				if (
					   control_leader === '401'
					&& test_leader === '403'
					&& current_message.indexOf(' #') !== -1
				) {
					control_leader = test_leader;
				}

				if (test_leader === control_leader) {
					test_message = current_message;
					break;
				}

				subindex++;
			}

			if (test_message === null) {
				test_message = '(null)';
			}

			/*
			control_stream.write(control_message + '\n\n');
			test_stream.write(test_message + '\n\n');
			*/

			// If both messages are RPL_WHOISIDLE replies, we can just skip
			// the strict equivalence check, since it's unlikely the idle times
			// will match exactly.
			if (
				   control_message.indexOf(' 317 ') !== -1
				&& test_message.indexOf(' 317 ') !== -1
			) {
				continue;
			}

			// If both messages are RPL_NAMREPLY, we should also skip the
			// check, because InspIRCd uses memory locations as the iterator
			// comparison value for the returned names, which we cannot
			// emulate.
			//
			// TODO: reinstate checks somehow
			if (
				   control_message.indexOf(' 353 ') !== -1
				&& test_message.indexOf(' 353 ') !== -1
			) {
				continue;
			}

			if (
				   control_message.indexOf(' 401 ') !== -1
				&& control_message.indexOf('#') !== -1
				&& test_message.indexOf(' 403 ') !== -1
			) {
				control_message = control_message.replace('401', '403');
				control_message = control_message.replace('No such nick/channel', 'No such channel');
			}

			if (
				   control_message.indexOf(' 333 ') !== -1
				&& test_message.indexOf(' 333 ') !== -1
			) {
				// For RPL_TOPICWHOTIME messages, standardize the timestamps,
				// since the control IRCD (InspIRCd) seems consistently slower
				// to process the original TOPIC command, resulting in a
				// discrepancy between the two timestamp values...
				control_message = control_message.split(' ').slice(0, -1).join(' ') + '12345';
				test_message = test_message.split(' ').slice(0, -1).join(' ') + '12345';
			}

			control_message = control_message.trim();
			control_message = control_message.replace(/\s+/g, ' ');
			control_message = control_message.replace(/827A[A-Z0-9]+/g, 'xxx');
			control_message = control_message.replace(/\2/g, '');
			control_message = control_message.replace('JOIN :', 'JOIN ');

			// If this is a RPL_WHOISCHANNELS message, sort the channels in the
			// response, because who knows how InspIRCd is sorting these...
			if (control_message.indexOf(' 319 ') !== -1) {
				control_message = cleanWhoisChannelsMessage(control_message);
			}

			test_message    = test_message.trim();
			test_message    = test_message.replace(/\s+/g, ' ');
			test_message    = test_message.replace(/827A[A-Z0-9]+/g, 'xxx');
			test_message    = test_message.replace(/\2/g, '');
			test_message    = test_message.replace(/~pirc/g, 'pirc');

			// Same as above.
			if (test_message.indexOf(' 319 ') !== -1) {
				test_message = cleanWhoisChannelsMessage(test_message);
			}

			if (control_message !== test_message) {
				console.log(control_messages);
				console.log(test_messages);
				console.log('$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$');
				console.log(' ');
				console.log(TextFormatter.magenta('MISMATCH: '));
				console.log('\t> ' + control_message + ' <');
				console.log(' ');
				console.log('\t\t' + TextFormatter.magenta('VS'));
				console.log(' ');
				console.log('\t> ' + test_message + ' <');
				console.log(' ');
				process.exit(1);
			}
		}

		control_messages = control_messages.slice(max_index);
		test_messages    = test_messages.slice(max_index);
	}

	socket.on('data', function handleLocalData(data) {
		var data_string = data.toString('utf8');

		if (!nick && data_string.indexOf('NICK ') === 0) {
			nick = data_string.slice(5);

			let crlf_index = nick.indexOf('\r\n');

			if (crlf_index !== -1) {
				nick = nick.slice(0, crlf_index);
			}
		}

		var prefix = TextFormatter.green('SEND [' + nick + ']: ');

		console.log(prefix + data_string);

		if (control_server) {
			control_server.write(data);
		}

		if (test_server) {
			test_server.write(data);
		}
	});

	function handleError() {
		if (socket) {
			socket.end();
			socket = null;
		}

		if (control_server) {
			control_server.end();
			control_server = null;
		}

		if (test_server) {
			test_server.end();
			test_server = null;
		}
	}

	socket.on('error', handleError);

	control_server.on('data', function handleControlData(data) {
		if (!socket) {
			return;
		}

		socket.write(data);

		var data_string = data.toString('utf8');

		if (control_message_remainder) {
			data_string = control_message_remainder + data_string;
		}

		var index = data_string.indexOf(Delimiters.CRLF);

		while (index !== -1) {
			let
				message = data_string.slice(0, index),
				leader  = parser.getLeaderForMessage(message);

			if (leader === 'NICK' && message.indexOf(nick) !== -1) {
				nick = message.split(' ').pop();

				// Some IRCD's put the new nick in the trailing parameter:
				if (nick[0] === ':') {
					nick = nick.slice(1);
				}
			}

			let prefix  = TextFormatter.cyan('RECV A [' + nick + ']: ');

			console.log(prefix + message);

			if (has_seen_control_motd_end && has_seen_test_motd_end) {
				control_messages.push(message);
				checkMessages();
			}

			if (message.indexOf(' 266 ') !== -1) {
				has_seen_control_motd_end = true;
			}

			data_string = data_string.slice(index + Delimiters.CRLF.length);
			index = data_string.indexOf(Delimiters.CRLF);
		}

		if (data_string.length > 0) {
			control_message_remainder = data_string;
		} else {
			control_message_remainder = null;
		}
	});

	control_server.on('error', handleError);

	test_server.on('data', function handleTestData(data) {
		var data_string = data.toString('utf8');

		if (test_message_remainder) {
			data_string = test_message_remainder + data_string;
		}

		var index = data_string.indexOf(Delimiters.CRLF);

		while (index !== -1) {
			let
				message = data_string.slice(0, index),
				prefix  = TextFormatter.yellow('RECV B [' + nick + ']: ');

			console.log(prefix + message);

			if (has_seen_test_motd_end && has_seen_control_motd_end) {
				test_messages.push(message);
				checkMessages();
			}

			if (message.indexOf(' 376 ') !== -1) {
				has_seen_test_motd_end = true;
			}

			data_string = data_string.slice(index + Delimiters.CRLF.length);
			index = data_string.indexOf(Delimiters.CRLF);
		}

		if (data_string.length > 0) {
			test_message_remainder = data_string;
		} else {
			test_message_remainder = null;
		}
	});

	test_server.on('error', handleError);
});


server.on('error', function handleError(error) {
	console.error(error);
	process.exit(1);
});

server.on('close', function handleClose() {
	console.log('server closed');
	process.exit(0);
});

server.listen(port, function handler() {
	console.log(
		`Proxy server listening for local connections on port ${port}`
	);
});
